package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous(name = "Teste", group = "FTC")
public class Teste extends LinearOpMode {

    private DcMotor roda_esq = null;
    private DcMotor roda_dir = null;
    private DcMotor braco = null;
    private DcMotor garra = null;
    private CRServo pinca = null;
    private CRServo coletor = null;

    private ElapsedTime tempo = new ElapsedTime();
    
    private double VELO_NORMAL = 0.6;

    @Override
    public void runOpMode() {

        // Mapeamento dos motores e servos conforme nomes do Driver Station
        roda_esq = hardwareMap.get(DcMotor.class, "roda_esq");
        roda_dir = hardwareMap.get(DcMotor.class, "roda_dir");
        braco = hardwareMap.get(DcMotor.class, "braco");
        garra = hardwareMap.get(DcMotor.class, "garra");
        pinca = hardwareMap.get(CRServo.class, "giro_garra");
        coletor = hardwareMap.get(CRServo.class, "coletor");

        // Ajustar direção da roda esquerda se necessário
        roda_esq.setDirection(DcMotor.Direction.REVERSE);

        waitForStart();
        tempo.reset();

        if (opModeIsActive()) {

            
            pincaComando(true);
            sleep(1000);
            pincaComando(false);
            
            
            
            

            
            
            // 6. Parar
            pararMotores();
        }
    }

    
    //sleep((int) (metros * 450) para setPower de 0.6;
    
    private void mover(double power, long tempoMs) {
        power = power / 100;
        roda_esq.setPower(-power);
        roda_dir.setPower(-power);
        sleep(tempoMs);
        pararMotores();
        sleep(1000);
    }

    private void coletar(double power, long tempoMs) {
        coletor.setPower(power);
        sleep(tempoMs);
        coletor.setPower(0);
    }

    private void liberarColeta() {
        coletor.setPower(-1.0);
    }

    private void elevar(double power, long tempoMs) {
        braco.setPower(power);
        sleep(tempoMs);
        braco.setPower(0.01);
    }

    private void pincaComando(boolean comando) {
        
        while (comando) {
            pinca.setPower(1.0);
        } 
        while (!comando){
            pinca.setPower(-1.0);
        }
    }

    private void acionarGarra(double power, long tempoMs) {
        garra.setPower(power);
        sleep(tempoMs);
        garra.setPower(0);
    }

    private void pararMotores() {
        roda_esq.setPower(0);
        roda_dir.setPower(0);
    }
    
    private void girar(double power, long tempoMs) {
        roda_esq.setPower(power);
        roda_dir.setPower(-power);
        sleep(tempoMs);
        roda_esq.setPower(-power);
        roda_dir.setPower(power);
        sleep(100);
        pararMotores();
    }
    
    private void moverPorMetros(double metros, double power) {
        roda_esq.setPower(-power);
        roda_dir.setPower(-power);
        int tempo = (int) ((metros * 4500 / (power * 10)));
        sleep(tempo);
        pararMotores();
        mover(-power, 500);
        sleep(1000);
    }
    
    private void girarPorGraus(double graus) {
        if (graus < 0) {
            roda_esq.setPower(VELO_NORMAL);
            roda_dir.setPower(-VELO_NORMAL);
            sleep((long) (-graus * 4.2));
        } else {
            roda_esq.setPower(-VELO_NORMAL);
            roda_dir.setPower(VELO_NORMAL);
            sleep((long) (graus * 4.2));
        }

        pararMotores();
        
    }
    
    private void levantarBracoPorGraus(int graus) {
        if (graus < 0) {
            braco.setPower(-1.0);
            sleep((long) (-graus * 15));
        } else {
            braco.setPower(1.0);
            sleep((long) (graus * 15));
        }
        braco.setPower(0.2);
    }
    

}